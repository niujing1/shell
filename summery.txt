##位置变量
$1--$9 表示第1-9个入参
$# 表示入参的个数
$* 会输出入参 $@等同于$*
$? 优先表示条件判断的结果,然后表示上一条指令执行的结果 0表示正确执行 其它表示执行出错
$0 表示当前脚本的名称
$$ 当前进程的PID
$! 上一个命令的PID
{} 匹配所有查找到的文件
find path -type/name/u  *.txt -print -exec '{}' ';'>filelist.txt


##文件查找
-user 指定文件所有者
-perm 指定文件权限

-mtime 修改时间
-atime 最后访问时间
-ctime 文件属性的最后改变时间
 n  ..的时间=几天
+n  ..的时间多于几天
-n  ..的时间少于几天

-type
f 普通文件
l 链接文件
d 目录文件
b 搜索块文件
c 字符设备文件
p 管道文件
s socket文件
条件之间-o连接表示 或 -a连接表示与

#file可以测试文件的类型

# 创建本地文件索引
#locate查找的是本地数据库,而不是文件系统
#sudo launchctl load -w /System/Library/LaunchDaemons/com.apple.locate.plist


#使用dd进行文件备份
dd if=[ifile] of=[outfile] count=[blocks] bs=[bytes]
if告诉dd从文件从读,而不是从标准输入 可以通过ibs和obs指定每次读取和写入的字节数
默认512


##算术操作符(数字的比较):
-eq 等于
-ne 不等于
-gt 大于
-lt 小于
-le 小于等于(less than or equal to)
-ge 大于等于

##使用单引号,可以很方便的输出特殊字符,而不用每个都转义一下



##
查看帮助信息
help  help
man ls
info ls



##特殊转义字符
\b     打印一个backspace
\c     不输出后边的字符串
\n     打印换行符
\t     打印水平制表符
\v     打印垂直制表符
printf遇到这些字符,不会解释,要加上-e  echo会主动解释


##几种常见特殊的符号表示：
 [[:upper:]]：所有大写字母
 [[:lower:]]：所有小写字母
 [[:alpha:]]：所有字母
 [[:digit:]]：所有数字
 [[:alnum:]]：所有的字母和数字
 [[:space:]]：所有空白字符
 [[:punct:]]：所有标点符号

##变量
NAME=value #等号的两边不能有空格
NAME是自己定义的变量名,通常使用大写字母
echo -e选项表示处理特殊字符
echo -n

##变量替换
syntax              desc
${var:-val}     如果有变量var没有被定义,或者为空,使用默认值,代替var的值,但不改变var的值
${var:-val}     var不为空,使用默认值,代替var的值,但不改变var的值
${var:=val}     如果有变量var没有被定义,或者为空,就把val赋给它
${var:?msg}     如果有变量var为空,那么打印msg到标准错误输出,并退出脚本


##使用--export选项可以吧一个本地变量倒入到环境中,成为环境变量
在shell中定义并导出环境变量export name=value或者使name=value;export name
在用户主目录下的.bashrc文件中修改环境变量PATH
在bash中子进程和父进程的变量引用的是不同的存储空间,不能通过修改子进程的值来修改父进程


##使用[ $# -gt 0 ]或者是if [ -z $1 ]


## 可以通过OLDPWD回到上次的目录
## 可以导出到grep查找
env | grep PWD查找自己关心的变量

##在测试命令[]中,使用 = 比较是否相等
[ -n string ] #字符串长度非0返回真(1)
[ -z string ] #字符串长度0返回真(0)
[ string1 = string2 ] #字符串相等返回真
[ string1 != string2 ] #字符串不相等返回真




## 注意:
if 的两边必须要有空格


#sort file 把文件里的行排序
sort -u file #去除重复项
sort -r file #sort默认升序排列,加上-r降序排列
#sort默认结果是输出到标准输出,需要重定向sort file > filesort
#才能实现,但是要把排序结果输出到原文件,重定向不能实现
sort -r number.txt -o number.txt #可以实现 -o选项
#sort默认按位排序,导致10比2小 -n选项告诉它按数字排序
sort -n file
#有一个内容如下的文件(test.txt)
banana:30:5.5
apple:10:2.5
要求第二列排序? sort提供了-t选项,可以设定间隔符(cut和paste的-d)
sort -n -k 2 -t: test.txt
-f忽略大小写
-c检测文件是否已排序,乱序,输出第一个乱序行的信息,最后返回1
-C检测文件是否已排序,乱序无输出,返回1
-M以月来排序

##continue n 的含义是结束当前迭代循环,从包裹n的第n层循环开始第n层的下一次迭代

grep -R test /etc/ 在etc目录下查找所有包含test关键词的文件
grep -A2 -B3 test test.txt在test.txt中查找包含test关键字并将这一行的前3行和后两行打印出来
选项参考
-r 不包含
-i 忽略大小写
\  转义特殊字符
-n 匹配结果显示行号
-c 统计一共有多少个匹配项
-v 显示不包含匹配文本的所有行
-E 加强正则匹配
###匹配
^  匹配开头
$  匹配开头结尾
.  匹配任意字符
*  匹配前边的字符0次或者n次
?  匹配前边的字符至少一次





##shell支持的通配符
* 匹配0或多个任意字符
? 匹配任意一个字符
[] 匹配指定字符范围内的任意一个字符
^或!表示非
##一般情况下,通配符*不会匹配隐藏文件,要./[.]bashrc这样用


#tar打包文件
-c  --create 表示要执行的操作是新建打包文件
-f 从一个文件读写数据到另一个文件
-x  --extract 解包文件
-t  --list在不解压文件的情况下查看文件列表
-d  --diff 查看tar包文件和相应文件系统有什么区别
-r  --append表示追加文件到tar包的结尾
-v  --verbose 显示更多关于被打包文件的详细信息


#在Linux中可以使用trap -l 或者 kill -l来查看所有的信号

sed 命令的使用
$ some_command|sed 'edit commands' #把上一个命令的输出作为sed的输入
或者
$ sed 'edit commands' files #使用命令行参数读取文件内容,而不是从标准输入读取
/pattern/action
Action   描述
p        打印行 print
d        删除行 delete
s        用一个新的表达式替换旧的表达式 substitute匹配时不区分大小写
num      只取代第num个匹配
w Filename 如果匹配成功,吧结果写入到文件filename中
i/I

集合            匹配
[a-z]        匹配一个小写字母
[A-Z]        匹配一个大写字母
[a-zA-Z]     匹配一个字母
[a-zA-Z0-9]  匹配一个数字或字母


printf格式控制符
%c        打印一个字符
%d%i      打印一个十进制数字
%m.nf     打印浮点数,m n都是数字,分别指定了小数点前后的位数
%o        打印无符号八进制数
%s        打印字符串
%x%X      打印无符号的十六进制数,使用%X打印大写字母
%%        输出字符串%

awk内建变量

FILENAME    awk当前读取数据的文件,如果从标准输入读取,变量的值为-,在BEGIN规则中变量为空
FNR         当前行号,读取1行加一,读取一个新的文件时设置为0
NR          所处理纪录的个数,每一个新行被读取,值自动加1
FS          输入行的分割符,默认是空格,可以通过-F指定
NF          当前行包含的字段数,每读入一个新的纪录,它的值被重新设定
OFS         输出时的字段分隔符,默认 空格
ORS         输出时的纪录分隔符,默认换行
RS          输入时的记录分隔符,默认换行

awk函数
length() 返回字符串的长度



